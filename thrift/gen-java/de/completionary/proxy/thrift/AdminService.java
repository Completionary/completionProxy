/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.completionary.proxy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdminService {

  public interface Iface {

    public void addSingleTerm(List<String> inputs, String output, String payload, int weight) throws org.apache.thrift.TException;

    public void addTerms(List<SuggestionField> terms) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSingleTerm(List<String> inputs, String output, String payload, int weight, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTerms(List<SuggestionField> terms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addSingleTerm(List<String> inputs, String output, String payload, int weight) throws org.apache.thrift.TException
    {
      send_addSingleTerm(inputs, output, payload, weight);
      recv_addSingleTerm();
    }

    public void send_addSingleTerm(List<String> inputs, String output, String payload, int weight) throws org.apache.thrift.TException
    {
      addSingleTerm_args args = new addSingleTerm_args();
      args.setInputs(inputs);
      args.setOutput(output);
      args.setPayload(payload);
      args.setWeight(weight);
      sendBase("addSingleTerm", args);
    }

    public void recv_addSingleTerm() throws org.apache.thrift.TException
    {
      addSingleTerm_result result = new addSingleTerm_result();
      receiveBase(result, "addSingleTerm");
      return;
    }

    public void addTerms(List<SuggestionField> terms) throws org.apache.thrift.TException
    {
      send_addTerms(terms);
      recv_addTerms();
    }

    public void send_addTerms(List<SuggestionField> terms) throws org.apache.thrift.TException
    {
      addTerms_args args = new addTerms_args();
      args.setTerms(terms);
      sendBase("addTerms", args);
    }

    public void recv_addTerms() throws org.apache.thrift.TException
    {
      addTerms_result result = new addTerms_result();
      receiveBase(result, "addTerms");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSingleTerm(List<String> inputs, String output, String payload, int weight, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSingleTerm_call method_call = new addSingleTerm_call(inputs, output, payload, weight, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSingleTerm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> inputs;
      private String output;
      private String payload;
      private int weight;
      public addSingleTerm_call(List<String> inputs, String output, String payload, int weight, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputs = inputs;
        this.output = output;
        this.payload = payload;
        this.weight = weight;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSingleTerm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSingleTerm_args args = new addSingleTerm_args();
        args.setInputs(inputs);
        args.setOutput(output);
        args.setPayload(payload);
        args.setWeight(weight);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSingleTerm();
      }
    }

    public void addTerms(List<SuggestionField> terms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTerms_call method_call = new addTerms_call(terms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTerms_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<SuggestionField> terms;
      public addTerms_call(List<SuggestionField> terms, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.terms = terms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTerms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTerms_args args = new addTerms_args();
        args.setTerms(terms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addTerms();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSingleTerm", new addSingleTerm());
      processMap.put("addTerms", new addTerms());
      return processMap;
    }

    public static class addSingleTerm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSingleTerm_args> {
      public addSingleTerm() {
        super("addSingleTerm");
      }

      public addSingleTerm_args getEmptyArgsInstance() {
        return new addSingleTerm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSingleTerm_result getResult(I iface, addSingleTerm_args args) throws org.apache.thrift.TException {
        addSingleTerm_result result = new addSingleTerm_result();
        iface.addSingleTerm(args.inputs, args.output, args.payload, args.weight);
        return result;
      }
    }

    public static class addTerms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTerms_args> {
      public addTerms() {
        super("addTerms");
      }

      public addTerms_args getEmptyArgsInstance() {
        return new addTerms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTerms_result getResult(I iface, addTerms_args args) throws org.apache.thrift.TException {
        addTerms_result result = new addTerms_result();
        iface.addTerms(args.terms);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSingleTerm", new addSingleTerm());
      processMap.put("addTerms", new addTerms());
      return processMap;
    }

    public static class addSingleTerm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSingleTerm_args, Void> {
      public addSingleTerm() {
        super("addSingleTerm");
      }

      public addSingleTerm_args getEmptyArgsInstance() {
        return new addSingleTerm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSingleTerm_result result = new addSingleTerm_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSingleTerm_result result = new addSingleTerm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSingleTerm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addSingleTerm(args.inputs, args.output, args.payload, args.weight,resultHandler);
      }
    }

    public static class addTerms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTerms_args, Void> {
      public addTerms() {
        super("addTerms");
      }

      public addTerms_args getEmptyArgsInstance() {
        return new addTerms_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addTerms_result result = new addTerms_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTerms_result result = new addTerms_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTerms_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addTerms(args.terms,resultHandler);
      }
    }

  }

  public static class addSingleTerm_args implements org.apache.thrift.TBase<addSingleTerm_args, addSingleTerm_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSingleTerm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSingleTerm_args");

    private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSingleTerm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSingleTerm_argsTupleSchemeFactory());
    }

    public List<String> inputs; // required
    public String output; // required
    public String payload; // required
    public int weight; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUTS((short)1, "inputs"),
      OUTPUT((short)2, "output"),
      PAYLOAD((short)3, "payload"),
      WEIGHT((short)4, "weight");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUTS
            return INPUTS;
          case 2: // OUTPUT
            return OUTPUT;
          case 3: // PAYLOAD
            return PAYLOAD;
          case 4: // WEIGHT
            return WEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSingleTerm_args.class, metaDataMap);
    }

    public addSingleTerm_args() {
    }

    public addSingleTerm_args(
      List<String> inputs,
      String output,
      String payload,
      int weight)
    {
      this();
      this.inputs = inputs;
      this.output = output;
      this.payload = payload;
      this.weight = weight;
      setWeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSingleTerm_args(addSingleTerm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputs()) {
        List<String> __this__inputs = new ArrayList<String>(other.inputs);
        this.inputs = __this__inputs;
      }
      if (other.isSetOutput()) {
        this.output = other.output;
      }
      if (other.isSetPayload()) {
        this.payload = other.payload;
      }
      this.weight = other.weight;
    }

    public addSingleTerm_args deepCopy() {
      return new addSingleTerm_args(this);
    }

    @Override
    public void clear() {
      this.inputs = null;
      this.output = null;
      this.payload = null;
      setWeightIsSet(false);
      this.weight = 0;
    }

    public int getInputsSize() {
      return (this.inputs == null) ? 0 : this.inputs.size();
    }

    public java.util.Iterator<String> getInputsIterator() {
      return (this.inputs == null) ? null : this.inputs.iterator();
    }

    public void addToInputs(String elem) {
      if (this.inputs == null) {
        this.inputs = new ArrayList<String>();
      }
      this.inputs.add(elem);
    }

    public List<String> getInputs() {
      return this.inputs;
    }

    public addSingleTerm_args setInputs(List<String> inputs) {
      this.inputs = inputs;
      return this;
    }

    public void unsetInputs() {
      this.inputs = null;
    }

    /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
    public boolean isSetInputs() {
      return this.inputs != null;
    }

    public void setInputsIsSet(boolean value) {
      if (!value) {
        this.inputs = null;
      }
    }

    public String getOutput() {
      return this.output;
    }

    public addSingleTerm_args setOutput(String output) {
      this.output = output;
      return this;
    }

    public void unsetOutput() {
      this.output = null;
    }

    /** Returns true if field output is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput() {
      return this.output != null;
    }

    public void setOutputIsSet(boolean value) {
      if (!value) {
        this.output = null;
      }
    }

    public String getPayload() {
      return this.payload;
    }

    public addSingleTerm_args setPayload(String payload) {
      this.payload = payload;
      return this;
    }

    public void unsetPayload() {
      this.payload = null;
    }

    /** Returns true if field payload is set (has been assigned a value) and false otherwise */
    public boolean isSetPayload() {
      return this.payload != null;
    }

    public void setPayloadIsSet(boolean value) {
      if (!value) {
        this.payload = null;
      }
    }

    public int getWeight() {
      return this.weight;
    }

    public addSingleTerm_args setWeight(int weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUTS:
        if (value == null) {
          unsetInputs();
        } else {
          setInputs((List<String>)value);
        }
        break;

      case OUTPUT:
        if (value == null) {
          unsetOutput();
        } else {
          setOutput((String)value);
        }
        break;

      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          setPayload((String)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUTS:
        return getInputs();

      case OUTPUT:
        return getOutput();

      case PAYLOAD:
        return getPayload();

      case WEIGHT:
        return Integer.valueOf(getWeight());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUTS:
        return isSetInputs();
      case OUTPUT:
        return isSetOutput();
      case PAYLOAD:
        return isSetPayload();
      case WEIGHT:
        return isSetWeight();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSingleTerm_args)
        return this.equals((addSingleTerm_args)that);
      return false;
    }

    public boolean equals(addSingleTerm_args that) {
      if (that == null)
        return false;

      boolean this_present_inputs = true && this.isSetInputs();
      boolean that_present_inputs = true && that.isSetInputs();
      if (this_present_inputs || that_present_inputs) {
        if (!(this_present_inputs && that_present_inputs))
          return false;
        if (!this.inputs.equals(that.inputs))
          return false;
      }

      boolean this_present_output = true && this.isSetOutput();
      boolean that_present_output = true && that.isSetOutput();
      if (this_present_output || that_present_output) {
        if (!(this_present_output && that_present_output))
          return false;
        if (!this.output.equals(that.output))
          return false;
      }

      boolean this_present_payload = true && this.isSetPayload();
      boolean that_present_payload = true && that.isSetPayload();
      if (this_present_payload || that_present_payload) {
        if (!(this_present_payload && that_present_payload))
          return false;
        if (!this.payload.equals(that.payload))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSingleTerm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputs()).compareTo(other.isSetInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutput()).compareTo(other.isSetOutput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, other.output);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSingleTerm_args(");
      boolean first = true;

      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("output:");
      if (this.output == null) {
        sb.append("null");
      } else {
        sb.append(this.output);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        sb.append(this.payload);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSingleTerm_argsStandardSchemeFactory implements SchemeFactory {
      public addSingleTerm_argsStandardScheme getScheme() {
        return new addSingleTerm_argsStandardScheme();
      }
    }

    private static class addSingleTerm_argsStandardScheme extends StandardScheme<addSingleTerm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSingleTerm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.inputs = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.inputs.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.output = iprot.readString();
                struct.setOutputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payload = iprot.readString();
                struct.setPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.weight = iprot.readI32();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSingleTerm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputs != null) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inputs.size()));
            for (String _iter19 : struct.inputs)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.output != null) {
          oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
          oprot.writeString(struct.output);
          oprot.writeFieldEnd();
        }
        if (struct.payload != null) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          oprot.writeString(struct.payload);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSingleTerm_argsTupleSchemeFactory implements SchemeFactory {
      public addSingleTerm_argsTupleScheme getScheme() {
        return new addSingleTerm_argsTupleScheme();
      }
    }

    private static class addSingleTerm_argsTupleScheme extends TupleScheme<addSingleTerm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSingleTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputs()) {
          optionals.set(0);
        }
        if (struct.isSetOutput()) {
          optionals.set(1);
        }
        if (struct.isSetPayload()) {
          optionals.set(2);
        }
        if (struct.isSetWeight()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInputs()) {
          {
            oprot.writeI32(struct.inputs.size());
            for (String _iter20 : struct.inputs)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetOutput()) {
          oprot.writeString(struct.output);
        }
        if (struct.isSetPayload()) {
          oprot.writeString(struct.payload);
        }
        if (struct.isSetWeight()) {
          oprot.writeI32(struct.weight);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSingleTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.inputs = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.inputs.add(_elem23);
            }
          }
          struct.setInputsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.output = iprot.readString();
          struct.setOutputIsSet(true);
        }
        if (incoming.get(2)) {
          struct.payload = iprot.readString();
          struct.setPayloadIsSet(true);
        }
        if (incoming.get(3)) {
          struct.weight = iprot.readI32();
          struct.setWeightIsSet(true);
        }
      }
    }

  }

  public static class addSingleTerm_result implements org.apache.thrift.TBase<addSingleTerm_result, addSingleTerm_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSingleTerm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSingleTerm_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSingleTerm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSingleTerm_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSingleTerm_result.class, metaDataMap);
    }

    public addSingleTerm_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSingleTerm_result(addSingleTerm_result other) {
    }

    public addSingleTerm_result deepCopy() {
      return new addSingleTerm_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSingleTerm_result)
        return this.equals((addSingleTerm_result)that);
      return false;
    }

    public boolean equals(addSingleTerm_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSingleTerm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSingleTerm_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSingleTerm_resultStandardSchemeFactory implements SchemeFactory {
      public addSingleTerm_resultStandardScheme getScheme() {
        return new addSingleTerm_resultStandardScheme();
      }
    }

    private static class addSingleTerm_resultStandardScheme extends StandardScheme<addSingleTerm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSingleTerm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSingleTerm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSingleTerm_resultTupleSchemeFactory implements SchemeFactory {
      public addSingleTerm_resultTupleScheme getScheme() {
        return new addSingleTerm_resultTupleScheme();
      }
    }

    private static class addSingleTerm_resultTupleScheme extends TupleScheme<addSingleTerm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSingleTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSingleTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addTerms_args implements org.apache.thrift.TBase<addTerms_args, addTerms_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTerms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTerms_args");

    private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTerms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTerms_argsTupleSchemeFactory());
    }

    public List<SuggestionField> terms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TERMS((short)1, "terms");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TERMS
            return TERMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuggestionField.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTerms_args.class, metaDataMap);
    }

    public addTerms_args() {
    }

    public addTerms_args(
      List<SuggestionField> terms)
    {
      this();
      this.terms = terms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTerms_args(addTerms_args other) {
      if (other.isSetTerms()) {
        List<SuggestionField> __this__terms = new ArrayList<SuggestionField>(other.terms.size());
        for (SuggestionField other_element : other.terms) {
          __this__terms.add(new SuggestionField(other_element));
        }
        this.terms = __this__terms;
      }
    }

    public addTerms_args deepCopy() {
      return new addTerms_args(this);
    }

    @Override
    public void clear() {
      this.terms = null;
    }

    public int getTermsSize() {
      return (this.terms == null) ? 0 : this.terms.size();
    }

    public java.util.Iterator<SuggestionField> getTermsIterator() {
      return (this.terms == null) ? null : this.terms.iterator();
    }

    public void addToTerms(SuggestionField elem) {
      if (this.terms == null) {
        this.terms = new ArrayList<SuggestionField>();
      }
      this.terms.add(elem);
    }

    public List<SuggestionField> getTerms() {
      return this.terms;
    }

    public addTerms_args setTerms(List<SuggestionField> terms) {
      this.terms = terms;
      return this;
    }

    public void unsetTerms() {
      this.terms = null;
    }

    /** Returns true if field terms is set (has been assigned a value) and false otherwise */
    public boolean isSetTerms() {
      return this.terms != null;
    }

    public void setTermsIsSet(boolean value) {
      if (!value) {
        this.terms = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TERMS:
        if (value == null) {
          unsetTerms();
        } else {
          setTerms((List<SuggestionField>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TERMS:
        return getTerms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TERMS:
        return isSetTerms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTerms_args)
        return this.equals((addTerms_args)that);
      return false;
    }

    public boolean equals(addTerms_args that) {
      if (that == null)
        return false;

      boolean this_present_terms = true && this.isSetTerms();
      boolean that_present_terms = true && that.isSetTerms();
      if (this_present_terms || that_present_terms) {
        if (!(this_present_terms && that_present_terms))
          return false;
        if (!this.terms.equals(that.terms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addTerms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTerms()).compareTo(other.isSetTerms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTerms_args(");
      boolean first = true;

      sb.append("terms:");
      if (this.terms == null) {
        sb.append("null");
      } else {
        sb.append(this.terms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTerms_argsStandardSchemeFactory implements SchemeFactory {
      public addTerms_argsStandardScheme getScheme() {
        return new addTerms_argsStandardScheme();
      }
    }

    private static class addTerms_argsStandardScheme extends StandardScheme<addTerms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTerms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TERMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.terms = new ArrayList<SuggestionField>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    SuggestionField _elem26;
                    _elem26 = new SuggestionField();
                    _elem26.read(iprot);
                    struct.terms.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setTermsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTerms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.terms != null) {
          oprot.writeFieldBegin(TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.terms.size()));
            for (SuggestionField _iter27 : struct.terms)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTerms_argsTupleSchemeFactory implements SchemeFactory {
      public addTerms_argsTupleScheme getScheme() {
        return new addTerms_argsTupleScheme();
      }
    }

    private static class addTerms_argsTupleScheme extends TupleScheme<addTerms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTerms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTerms()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTerms()) {
          {
            oprot.writeI32(struct.terms.size());
            for (SuggestionField _iter28 : struct.terms)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTerms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.terms = new ArrayList<SuggestionField>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              SuggestionField _elem31;
              _elem31 = new SuggestionField();
              _elem31.read(iprot);
              struct.terms.add(_elem31);
            }
          }
          struct.setTermsIsSet(true);
        }
      }
    }

  }

  public static class addTerms_result implements org.apache.thrift.TBase<addTerms_result, addTerms_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTerms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTerms_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTerms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTerms_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTerms_result.class, metaDataMap);
    }

    public addTerms_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTerms_result(addTerms_result other) {
    }

    public addTerms_result deepCopy() {
      return new addTerms_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTerms_result)
        return this.equals((addTerms_result)that);
      return false;
    }

    public boolean equals(addTerms_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addTerms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTerms_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTerms_resultStandardSchemeFactory implements SchemeFactory {
      public addTerms_resultStandardScheme getScheme() {
        return new addTerms_resultStandardScheme();
      }
    }

    private static class addTerms_resultStandardScheme extends StandardScheme<addTerms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTerms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTerms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTerms_resultTupleSchemeFactory implements SchemeFactory {
      public addTerms_resultTupleScheme getScheme() {
        return new addTerms_resultTupleScheme();
      }
    }

    private static class addTerms_resultTupleScheme extends TupleScheme<addTerms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTerms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTerms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
